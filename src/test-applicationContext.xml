<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/jdbc
                            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost/testdb?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="1234"></property>
    </bean>-->

    <bean id="userDao" class="user.dao.UserDaoJdbc">
        <property name="sqlService" ref="sqlService"></property>
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="userService" class="user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"></property>
        <property name="mailSender" ref="mailSender"></property>
    </bean>

    <bean id="mailSender" class="user.service.DummyMailSender">
        <property name="host" value="mail.server.com"></property>
    </bean>

    <bean id="testUserService" class="user.service.UserServiceTest$TestUserService" parent="userService"></bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- @Transactional 이 붙은 타입과 메서드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록-->
    <tx:annotation-driven />

    <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
    <!--<context:annotation-config/>-->

    <bean id="sqlService" class="user.sqlService.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller"></property>
        <property name="sqlmap" value="classpath:user/dao/sqlmap.xml"></property>
        <property name="sqlRegistry" ref="sqlRegistry"></property>
    </bean>

    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="user.sqlService.jaxb"></property>
    </bean>

    <bean id="sqlRegistry" class="user.sqlService.sqlRegistry.EmbeddedDbSqlRegistry">
        <property name="dataSource" ref="embeddedDatabase"></property>
    </bean>

    <bean id="sqlAdminService" class="user.sqlService.SqlAdminService">
        <property name="updatableSqlRegistry" ref="sqlRegistry"></property>
    </bean>

    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
        <jdbc:script location="user/sqlService/sqlRegistry/sqlRegistrySchema.sql"></jdbc:script>
    </jdbc:embedded-database>

</beans>


